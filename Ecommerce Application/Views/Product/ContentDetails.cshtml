@model Ecommerce_Application.Models.ProductDetails
@using Ecommerce_Application.Repositories
@inject IProductImageRepository _productImageService;

<div id="containerD">
    <div id="imageSection">
        <img id="imgDetails" src=@Model.ThumbImage>
    </div>
    <div id="productDetails">
        <h1>@Model.ProductName</h1>

        <div id="details">
            <h3 id="ProductName">@Model.ProductName</h3>
            <h4>@Model.BrandName</h4>
            <h2 id="ProductPrice"><sup>₹</sup>@Model.SellingPrice</h2>
            <del style="color:cadetblue;"><h4> MRP @Model.Price</h4></del>
        </div>
        <div id="productPreview">
            <h3>Product Preview</h3>
            @{
                var AllImage = await _productImageService.GetAllImagesById(Model.ProductId);

                foreach (var images in AllImage)
                {
                    <img class="previewImg" id="previewImg" src="@images.ImagePath">
                }
            }
        </div>


        <div id="Loginbutton"><button class="addProduct">Add To Cart</button></div>


    </div>
</div>


@section Images {
    <script>

        $(document).ready(function () {
            $(".previewImg").click(function () {
                var changeSrc = $(this).attr("src")
                $("#imgDetails").attr("src", changeSrc);
                $('.selected').removeClass('selected');
                $(this).addClass('selected');

            });


            $('#Loginbutton').click(function (e) {
                e.preventDefault();
                var ProductId = @Model.ProductId;
                var localData = localStorage.getItem("cart");
                AfterClick(ProductId, localData);
            });

            function AfterClick(ProductId, localData) {
                debugger
                $.ajax({
                    url: '@Url.Action("AddCart", "Cart")',
                    method: 'POST',
                    data: { id: ProductId, cartData: localData },
                    dataType: 'json',
                    success: function (response) {
                        debugger
                        if (response.user == null) {
                            updateLocalStorage(response.cart);
                        }
                        updateCartBadge(response);
                        toastr.success("Your item was successfully added to the cart.", "Congrats!", { "progressBar": true, "positionClass": "toast-bottom-right" });
                        console.log('Submission was successful.');
                    },
                    error: function (error) {
                        console.log('An error occurred.');
                        toastr.error("There was a problem adding this product to the cart. Please try again later.", "Sorry!", { "progressBar": true, "positionClass": "toast-bottom-right" });
                        console.log(error);
                    }
                });
            }

            function updateLocalStorage(cartItems) {
                debugger
                var existingCart = JSON.parse(localStorage.getItem("cart")) || [];
                cartItems.forEach(function (cartItem) {
                    var index = existingCart.findIndex(function (item) {
                        return item.productId === cartItem.productId;
                    });
                    if (index !== -1) {
                        existingCart[index].quantity += cartItem.quantity;
                    } else {
                        existingCart.push(cartItem);
                    }
                });
                localStorage.setItem("cart", JSON.stringify(existingCart));
            }

            function updateCartBadge(response) {
                if (response.user == null) {
                    var existingCart = JSON.parse(localStorage.getItem("cart")) || [];
                }
                else{
                    var existingCart = response.cart;
                }
                $("#badge").text(existingCart.length);
            }

        });

    </script>
}





